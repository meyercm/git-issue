#!/usr/bin/env ruby
# IMPORTANT:
#   This file has been generated by ruby_collate; avoid changing this file;
#   instead, change the source files and use ruby_collate to re-gen this file.


#
# Random R&D project to cut down on app-start times for ruby apps;
# idea is to collate all the various and sundry files into a single file-
# thus reducing the # of File open/close actions that have to take place
#
# Currently Aspector is giving a headache, as it runs at require time,
# monkey-patching and wrapping methods during the require.
#
# Also need to watch for dynamically required code, or code that isn't
# required until the app is running- an alternative strategy to speed things up.
#
require 'digest'
class Collator
  def initialize(options = {})
    @options = options
    @required_files = {}
  end

  def collate(file)
    result = do_collate(file, [])
    if result[0..1] == "#!"  #this is a script! put the warning on line 2.
      split = result.split("\n")
      result = ([split[0], @@warning] + split[1..-1]).join("\n")
    else
      result = @@warning + result
    end
    result
  end

  def do_collate(file, requires)
    result = ""
    unless requires.include?(file)
      requires << file
      File.readlines(file).each do |line|
        next_file = path_required(line, file)
        if next_file then
          result += do_collate(next_file, requires)
        else
          result += line
        end
      end
      result += "\n#end of #{File.basename(file)}"
      result += "\n\n"
    end
    result
  end

  def path_required(line, current_file)
    result = nil
    if line =~ /^\s*require_relative[ \(]*(.*?)[ \)]*$/
      warn "WARNING: Indented require_relative in #{current_file}: #{line}" if line[0] == " "
      result = extract_path($1, current_file)
    end
    result
  end

  def extract_path(ugly_string, current_file)
    result = nil

    if ugly_string =~ /['"]{1}(.*)['"]{1}/
      prettier_string = $1
      unless prettier_string =~ /\+|\#\{.*\}/ then
        if prettier_string[0] != "." then
          prettier_string = "./#{prettier_string}"
        end
        result = File.expand_path(prettier_string, File.dirname(current_file))
        result += '.rb' unless result[-3,3] == '.rb'
      end
    end
    if result.nil?
      warn "WARNING: Dynamic code loading in #{current_file}: require_relative #{ugly_string}"
      if !@options[:allow_dynamic]
        raise ArgumentError.new("Cannot Process <<#{ugly_string} -> #{prettier_string}>> in #{current_file}")
      end
    end
    result
  end

@@warning = "\
# IMPORTANT:
#   This file has been generated by ruby_collate; avoid changing this file;
#   instead, change the source files and use ruby_collate to re-gen this file.

"
end
#end of collator.rb

#we should accept a single command line argument;

path_to_collate = File.expand_path(ARGV[0], Dir.pwd)
collator = Collator.new(allow_dynamic: true)

if path_to_collate then
  results = collator.collate(path_to_collate)
else
  #result = collator.show_help_message
end

print results
warn "Collate Complete"
#end of ruby_collate.rb